- name: Check and use preferred proxy
  run: |
    function check_proxy {
      local proxy_type=$1
      local proxy_value=$2
      if [ -n "$proxy_value" ]; then
        if curl -s --proxy $proxy_value https://www.google.com -o /dev/null; then
          echo "$proxy_type proxy is working"
          echo "Using $proxy_type proxy"
          curl -s --proxy $proxy_value https://ipinfo.io | jq
          export PROXY=$proxy_value
          export PROXY_TYPE=$proxy_type
          return 0
        else
          echo "$proxy_type proxy failed"
          return 1
        fi
      fi
      return 1
    }

    if [ "$preferred_proxy" == "http" ]; then
      check_proxy "http" $http_proxy || check_proxy "https" $https_proxy || check_proxy "socks5" $socks_proxy
    elif [ "$preferred_proxy" == "https" ]; then
      check_proxy "https" $https_proxy || check_proxy "http" $http_proxy || check_proxy "socks5" $socks_proxy
    elif [ "$preferred_proxy" == "socks5" ]; then
      check_proxy "socks5" $socks_proxy || check_proxy "http" $http_proxy || check_proxy "https" $https_proxy
    else
      check_proxy "http" $http_proxy || check_proxy "https" $https_proxy || check_proxy "socks5" $socks_proxy
    fi

    if [ -z "$PROXY" ]; then
      echo "No working proxy found"
      exit 1
    else
      echo "Using proxy: $PROXY"
    fi

- name: Run Docker container and save logs
  run: |
    echo "Using proxy: $PROXY"
    docker run -e HTTPS_PROXY=$PROXY -e HTTP_PROXY=$PROXY -e SOCKS5_PROXY=$PROXY -e NO_PROXY=$no_proxy --memory="4g" $docker_image > $log_file_name &
    DOCKER_PID=$!
    
    # Monitoring loop
    while true; do
      sleep 60 # Check every minute
      echo "Checking proxy: $PROXY"
      if ! curl -s --proxy $PROXY https://www.google.com -o /dev/null; then
        echo "Proxy failed, stopping runner and Docker container..."
        kill $DOCKER_PID
        exit 1
      fi
    done &
    MONITOR_PID=$!

    sleep 16800 # Sleep for 280 minutes
    if ps -p $DOCKER_PID > /dev/null; then
      echo "Docker container running for more than 280 minutes, waiting for 10 more minutes to send logs..."
      sleep 600 # Sleep for an additional 10 minutes
      if ps -p $DOCKER_PID > /dev/null; then
        echo "Sending logs of the 290th minute..."
        cat $log_file_name > ${log_file_base}_${PROXY_TYPE}_290th_minute_logs.txt
        echo "Discord Webhook URL: $discord_webhook"
        echo "curl -F \"file=@${log_file_base}_${PROXY_TYPE}_290th_minute_logs.txt\" -H \"Content-Type: multipart/form-data\" $discord_webhook"
        curl -F "file=@${log_file_base}_${PROXY_TYPE}_290th_minute_logs.txt" -H "Content-Type: multipart/form-data" $discord_webhook
      fi
    fi
    wait $DOCKER_PID
    kill $MONITOR_PID

- name: Send final logs to Discord
  run: |
    echo "Discord Webhook URL: $discord_webhook"
    echo "curl -F \"file=@${log_file_base}_${PROXY_TYPE}.txt\" -H \"Content-Type: multipart/form-data\" $discord_webhook"
    curl -F "file=@${log_file_base}_${PROXY_TYPE}.txt" -H "Content-Type: multipart/form-data" $discord_webhook
